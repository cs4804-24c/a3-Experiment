export default function latinSquare(nOrTreatments, isAlwaysBalanced = false) {
    if (typeof nOrTreatments === "number") {
        return latinSquareBySize(nOrTreatments, isAlwaysBalanced);
    }
    let latinSquareIndexes = latinSquareBySize(nOrTreatments.length, isAlwaysBalanced);
    return latinSquareIndexes.map((row) => row.map((i) => nOrTreatments[i]));
}
function latinSquareBySize(n, isAlwaysBalanced) {
    if (n < 0)
        throw new Error("Latin square size must be > 0");
    if (n == 0)
        return [];
    if (n == 1)
        return [[0]];
    let firstRow = new Array(n);
    for (let i = 0; i < n; i++) {
        if (i < 2) {
            firstRow[i] = i;
        }
        else if (i % 2 == 0) {
            firstRow[i] = n - i / 2;
        }
        else {
            firstRow[i] = Math.floor(i / 2) + 1;
        }
    }
    let latinSquare = [firstRow];
    let previousRow = firstRow;
    for (let i = 1; i < n; i += 1) {
        let newRow = previousRow.map((cell) => (cell + 1) % n);
        latinSquare.push(newRow);
        previousRow = newRow;
    }
    // In case there is an odd number of treatments, we also need to add the
    // reversed rows.
    if (isAlwaysBalanced && n % 2 > 0) {
        for (let i = 0; i < n; i += 1) {
            latinSquare.push(latinSquare[i].slice().reverse());
        }
    }
    return latinSquare;
}
//# sourceMappingURL=main.js.map