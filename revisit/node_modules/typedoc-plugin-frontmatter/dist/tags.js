"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFrontmatterTags = void 0;
function getFrontmatterTags(comment, frontmatterTags, tagFormat) {
    var _a;
    if ((_a = comment.blockTags) === null || _a === void 0 ? void 0 : _a.length) {
        const tags = comment.blockTags
            .filter((tag) => frontmatterTags === null || frontmatterTags === void 0 ? void 0 : frontmatterTags.includes(getTagName(tag)))
            .reduce((prev, current) => {
            const tagName = getTagName(current);
            const tagValue = current.content
                .filter((commentPart) => commentPart.kind === 'text')
                .map((commentPart) => commentPart.text, false)
                .join('\n');
            return {
                ...prev,
                [toVariable(tagName, tagFormat)]: isNaN(Number(tagValue))
                    ? tagValue
                    : Number(tagValue),
            };
        }, {});
        return tags;
    }
    return {};
}
exports.getFrontmatterTags = getFrontmatterTags;
function getTagName(tag) {
    return tag.tag.substring(1);
}
function toVariable(key, frontmatterTagsToSnakeCase) {
    if (frontmatterTagsToSnakeCase) {
        return toSnakeCase(key);
    }
    return key;
}
function toSnakeCase(key) {
    var _a;
    return (((_a = key
        .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)) === null || _a === void 0 ? void 0 : _a.map((s) => s.toLowerCase()).join('_')) || '');
}
