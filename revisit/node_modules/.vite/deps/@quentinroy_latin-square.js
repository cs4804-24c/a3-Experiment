import "./chunk-624QZG55.js";

// node_modules/@quentinroy/latin-square/dist/src/main.js
function latinSquare(nOrTreatments, isAlwaysBalanced = false) {
  if (typeof nOrTreatments === "number") {
    return latinSquareBySize(nOrTreatments, isAlwaysBalanced);
  }
  let latinSquareIndexes = latinSquareBySize(nOrTreatments.length, isAlwaysBalanced);
  return latinSquareIndexes.map((row) => row.map((i) => nOrTreatments[i]));
}
function latinSquareBySize(n, isAlwaysBalanced) {
  if (n < 0)
    throw new Error("Latin square size must be > 0");
  if (n == 0)
    return [];
  if (n == 1)
    return [[0]];
  let firstRow = new Array(n);
  for (let i = 0; i < n; i++) {
    if (i < 2) {
      firstRow[i] = i;
    } else if (i % 2 == 0) {
      firstRow[i] = n - i / 2;
    } else {
      firstRow[i] = Math.floor(i / 2) + 1;
    }
  }
  let latinSquare2 = [firstRow];
  let previousRow = firstRow;
  for (let i = 1; i < n; i += 1) {
    let newRow = previousRow.map((cell) => (cell + 1) % n);
    latinSquare2.push(newRow);
    previousRow = newRow;
  }
  if (isAlwaysBalanced && n % 2 > 0) {
    for (let i = 0; i < n; i += 1) {
      latinSquare2.push(latinSquare2[i].slice().reverse());
    }
  }
  return latinSquare2;
}
export {
  latinSquare as default
};
//# sourceMappingURL=@quentinroy_latin-square.js.map
